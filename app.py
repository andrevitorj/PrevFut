import streamlit as st
import pandas as pd
from io import StringIO
import sys
from typing import Tuple, Optional, Dict, Any
from PrevFut_1_6 import (
    processar_confronto,
    buscar_id_time,
    detectar_temporada_atual,
    load_cache
)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Previs√£o de Placar de Futebol",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo e descri√ß√£o
st.title("‚öΩ Previs√£o de Placar de Futebol - Vers√£o 1.6")
st.markdown("Digite os times e selecione o mandante para prever o placar, estat√≠sticas e identificar oportunidades de apostas.")

# Formul√°rio de input
with st.form(key="previsao_form"):
    col1, col2 = st.columns(2)
    with col1:
        nome_input_a = st.text_input("Time A (ex.: Aston Villa)", key="time_a")
    with col2:
        nome_input_b = st.text_input("Time B (ex.: Paris Saint Germain)", key="time_b")
    
    mando = st.radio("Mandante:", ["Time A", "Time B"], horizontal=True)
    submit_button = st.form_submit_button("Prever Placar e Analisar Oportunidades")

# Processar previs√£o
if submit_button:
    if not nome_input_a or not nome_input_b:
        st.error("Por favor, preencha os nomes dos dois times.")
    else:
        with st.spinner("Buscando dados, calculando previs√£o e analisando odds..."):
            # Capturar sa√≠da de print
            old_stdout = sys.stdout
            sys.stdout = mystdout = StringIO()
            
            # Buscar IDs e temporadas
            time_id_a, nome_a = buscar_id_time(nome_input_a)
            time_id_b, nome_b = buscar_id_time(nome_input_b)
            
            if time_id_a and time_id_b:
                temp_a = detectar_temporada_atual(time_id_a)
                temp_b = detectar_temporada_atual(time_id_b)
                if temp_a and temp_b:
                    time_a_mandante = mando == "Time A"
                    processar_confronto(nome_a, time_id_a, temp_a, nome_b, time_id_b, temp_b, time_a_mandante)
                else:
                    st.error("N√£o foi poss√≠vel detectar temporadas para um ou ambos os times.")
            else:
                st.error("Um ou ambos os times n√£o foram encontrados.")
            
            # Restaurar stdout e obter sa√≠da
            sys.stdout = old_stdout
            output = mystdout.getvalue()
            
            # Processar resultados
            if output:
                # Criar abas
                tab1, tab2, tab3 = st.tabs(["Previs√£o", "Estat√≠sticas Detalhadas", "Hist√≥rico de Partidas"])
                
                with tab1:
                    st.subheader("üìä Previs√£o do Confronto")
                    
                    # Se√ß√£o 1.1 - Placar mais prov√°vel
                    placar_section = next(s for s in output.split("\n\n") if s.startswith("üéØ Previs√£o de placar"))
                    st.markdown(f"**{placar_section.splitlines()[0]}**")
                    st.write(placar_section.splitlines()[1])
                    
                    # Se√ß√£o 1.2 - Odds dentro do IC 80%
                    st.subheader("üìä Odds com Valor Esperado (IC 80%)")
                    oportunidades_section = next(s for s in output.split("\n\n") if s.startswith("üí° Oportunidades de Apostas"))
                    for line in oportunidades_section.splitlines()[1:]:
                        if "Oportunidade" in line:
                            st.success(line.split(":")[1].strip())
                        else:
                            st.write(line)
                    
                    # Se√ß√£o 1.3 - Todas as estat√≠sticas previstas
                    st.subheader("üìà Estat√≠sticas Previstas")
                    estat_section = next(s for s in output.split("\n\n") if s.startswith("üìà Previs√£o estat√≠stica"))
                    st.markdown(f"**{estat_section.splitlines()[0]}**")
                    
                    # Ordem de import√¢ncia das estat√≠sticas
                    estat_ordem = [
                        "Gols Feita", "Gols Sofrida",
                        "Chutes no Gol Feita", "Chutes no Gol Sofrida",
                        "Finaliza√ß√µes Totais Feita", "Finaliza√ß√µes Totais Sofrida",
                        "Posse de Bola (%) Feita", "Posse de Bola (%) Sofrida",
                        "Escanteios Feita", "Escanteios Sofrida",
                        "Faltas Feita", "Faltas Sofrida",
                        "Cart√µes Amarelos Feita", "Cart√µes Amarelos Sofrida",
                        "Cart√µes Vermelhos Feita", "Cart√µes Vermelhos Sofrida",
                        "Impedimentos Feita", "Impedimentos Sofrida"
                    ]
                    
                    # Processar estat√≠sticas para cada time
                    stats_data = []
                    for section in output.split("\n\n"):
                        if section.startswith("üîπ Estat√≠sticas de") or section.startswith("üî∏ Estat√≠sticas de"):
                            time_nome = section.split(":")[0].split("de ")[1]
                            for line in section.splitlines()[1:]:
                                if ":" in line:
                                    stat, value = line.split(":", 1)
                                    stat = stat.strip()
                                    value = value.strip()
                                    # Extrair valores do IC
                                    if "¬±" in value:
                                        media = float(value.split("¬±")[0].strip())
                                        desvio = float(value.split("¬±")[1].split("(")[0].strip())
                                        ic_inf = media - desvio
                                        ic_sup = media + desvio
                                        stats_data.append({
                                            "Time": time_nome,
                                            "Estat√≠stica": stat,
                                            "M√©dia": media,
                                            "IC Inferior": ic_inf,
                                            "IC Superior": ic_sup
                                        })
                    
                    # Exibir estat√≠sticas ordenadas
                    for stat in estat_ordem:
                        for time in [nome_a, nome_b]:
                            stat_data = next((item for item in stats_data if item["Estat√≠stica"] == stat and item["Time"] == time), None)
                            if stat_data:
                                col1, col2 = st.columns(2)
                                with col1:
                                    st.metric(
                                        label=f"{stat} - {time}",
                                        value=f"{stat_data['M√©dia']:.2f}",
                                        delta=f"IC: {stat_data['IC Inferior']:.2f}-{stat_data['IC Superior']:.2f}"
                                    )
                
                with tab2:
                    st.subheader("üìã Estat√≠sticas Detalhadas por Time")
                    
                    # Se√ß√£o 2.1 - Estat√≠sticas ordenadas por import√¢ncia
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown(f"### {nome_a} (Mandante)" if time_a_mandante else f"### {nome_a} (Visitante)")
                        df_a = pd.DataFrame([item for item in stats_data if item["Time"] == nome_a])
                        df_a = df_a[df_a["Estat√≠stica"].isin(estat_ordem)].sort_values(
                            by="Estat√≠stica", 
                            key=lambda x: x.map({v:i for i,v in enumerate(estat_ordem)})
                        )
                        st.dataframe(
                            df_a[["Estat√≠stica", "M√©dia", "IC Inferior", "IC Superior"]].rename(columns={
                                "Estat√≠stica": "Estat√≠stica",
                                "M√©dia": "M√©dia",
                                "IC Inferior": "M√≠nimo",
                                "IC Superior": "M√°ximo"
                            }),
                            hide_index=True,
                            use_container_width=True
                        )
                    
                    with col2:
                        st.markdown(f"### {nome_b} (Mandante)" if not time_a_mandante else f"### {nome_b} (Visitante)")
                        df_b = pd.DataFrame([item for item in stats_data if item["Time"] == nome_b])
                        df_b = df_b[df_b["Estat√≠stica"].isin(estat_ordem)].sort_values(
                            by="Estat√≠stica", 
                            key=lambda x: x.map({v:i for i,v in enumerate(estat_ordem)})
                        )
                        st.dataframe(
                            df_b[["Estat√≠stica", "M√©dia", "IC Inferior", "IC Superior"]].rename(columns={
                                "Estat√≠stica": "Estat√≠stica",
                                "M√©dia": "M√©dia",
                                "IC Inferior": "M√≠nimo",
                                "IC Superior": "M√°ximo"
                            }),
                            hide_index=True,
                            use_container_width=True
                        )
                
                with tab3:
                    st.subheader("üìÖ Hist√≥rico de Partidas Recentes")
                    
                    # Se√ß√£o 3 - Hist√≥rico de partidas
                    for section in output.split("\n\n"):
                        if "jogos j√° realizados retornados para" in section:
                            st.markdown(f"**{section.splitlines()[0]}**")
                            jogos = section.splitlines()[1:]
                            for jogo in jogos:
                                if jogo.strip():
                                    st.write(jogo)
            else:
                st.warning("Nenhuma sa√≠da gerada. Verifique os inputs e tente novamente.")